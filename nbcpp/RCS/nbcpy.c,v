head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2019.01.10.23.44.32;	author jbev;	state Exp;
branches;
next	;


desc
@Fix warning errors for Linux port
@


1.1
log
@Initial revision
@
text
@/* original parser id follows */
/* yysccsid[] = "@@(#)yaccpar	1.9 (Berkeley) 02/21/93" */
/* (use YYMAJOR/YYMINOR for ifdefs dependent on parser version) */

#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYPATCH 20170709

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)
#define YYENOMEM       (-2)
#define YYEOF          0
#define YYPREFIX "yy"

#define YYPURE 0

#line 4 "nbcpy.y"
/*
 * 	(c) Copyright 1986 Gould Inc.
 * 	    All Rights Reserved.
 */

#line 27 "y.tab.c"

#if ! defined(YYSTYPE) && ! defined(YYSTYPE_IS_DECLARED)
/* Default: YYSTYPE is the semantic value type. */
typedef int YYSTYPE;
# define YYSTYPE_IS_DECLARED 1
#endif

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define number 257
#define stop 258
#define DEFINED 259
#define EQ 260
#define NE 261
#define LE 262
#define GE 263
#define LS 264
#define RS 265
#define ANDAND 266
#define OROR 267
#define UMINUS 268
#define YYERRCODE 256
typedef short YYINT;
static const YYINT yylhs[] = {                           -1,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    2,    2,    2,    2,
};
static const YYINT yylen[] = {                            2,
    2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
    3,    1,    2,    2,    2,    3,    4,    2,    1,
};
static const YYINT yydefred[] = {                         0,
   29,    0,    0,    0,    0,    0,    0,    0,   22,   28,
    0,   23,   24,   25,    0,    1,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    2,    3,    4,   27,    0,
    0,
};
static const YYINT yydgoto[] = {                          7,
    8,    9,
};
static const YYINT yysindex[] = {                       358,
    0,  -38,  358,  358,  358,  358,    0,  -37,    0,    0,
 -254,    0,    0,    0,  -26,    0,  358,  358,  358,  358,
  358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
  358,  358,  358,  358,  358,  358,  -28,    0,  405,  405,
  130,  130,  139,  139,  367,  108,   13,    1,  277,  277,
  394,  130,  130,  -33,  -33,    0,    0,    0,    0,  358,
   13,
};
static const YYINT yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  321,  344,
   -9,   91,   28,   80,  -11,  429,   52,    0,  419,  425,
  355,  120,  159,   39,   68,    0,    0,    0,    0,    0,
   59,
};
static const YYINT yygindex[] = {                         0,
  538,   37,
};
#define YYTABLESIZE 696
static const YYINT yytable[] = {                         36,
   29,   11,   37,   36,   34,   32,   25,   33,   34,   35,
   36,   29,   59,   35,   38,   34,   32,   25,   33,    0,
   35,    0,   30,    0,   31,   26,    0,    0,   11,   18,
    0,   11,   18,   30,   11,   31,   26,   36,   29,   12,
   13,   14,   34,   32,   25,   33,   18,   35,   11,   36,
   29,   18,    0,   11,   34,   32,   28,   33,   60,   35,
   30,    0,   31,   26,    0,    7,    0,   28,    7,    0,
    0,    7,   30,    0,   31,   26,    5,    0,    0,    5,
    0,    5,    5,    5,   11,    7,   27,    7,    0,    7,
    7,    0,   21,    0,   28,   21,    5,   27,    5,   20,
    5,    5,   20,    0,    0,    6,   28,    0,    6,   21,
    6,    6,    6,    0,   11,    0,   20,    8,    0,    0,
    8,    7,    0,    8,   27,    6,    0,    6,   12,    6,
    6,   12,    5,    0,   12,    0,   27,    8,    0,    8,
    0,    8,    8,    0,   36,   29,    0,    0,   12,   34,
   32,    7,   33,   12,   35,    0,    0,    9,    0,    0,
    9,    6,    5,    9,    0,    0,   36,   30,    0,   31,
    0,   34,   32,    8,   33,   36,   35,    9,    0,    0,
   34,   32,    9,   33,   12,   35,    0,    0,    0,    0,
    0,    6,    0,    0,    0,    0,   10,    0,    0,   10,
    0,   28,   10,    8,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    9,   12,    0,   10,    0,   10,    0,
   16,   10,   17,   18,   19,   20,   21,   22,   23,   24,
    0,   27,    0,   17,   18,   19,   20,   21,   22,   23,
   24,    0,    0,    9,    0,    0,   18,    0,   11,    0,
   11,   11,   10,    0,   18,   18,   11,   11,    0,    0,
   17,   18,   19,   20,   21,   22,   23,   24,    0,    0,
    0,    0,   17,   18,   19,   20,   21,   22,   23,   24,
    0,    0,   10,    0,    0,    7,    0,    7,    7,    7,
    7,    7,    7,    7,    7,    0,    5,    0,    5,    5,
    5,    5,    5,    5,    5,    5,    0,    0,    0,   21,
    0,    0,    0,   36,   29,    0,   20,    0,   34,   32,
    0,   33,    0,   35,    0,    6,    0,    6,    6,    6,
    6,    6,    6,    6,    6,    0,   30,    8,   31,    8,
    8,    8,    8,    8,    8,    8,    8,    0,   12,    0,
   12,   12,    0,    0,    0,    0,   12,   12,   13,    0,
    0,   13,    0,    0,   13,    0,    0,   17,   18,   19,
   20,   21,   22,   23,    0,    0,    0,    9,   13,    9,
    9,   14,    0,   13,   14,    9,    9,   14,    0,    0,
    4,    0,   15,   21,   22,   15,    0,    6,   15,    0,
    0,   14,    3,   36,   29,    0,   14,    0,   34,   32,
    0,   33,   15,   35,   13,    0,   10,   15,   10,   10,
    0,    0,    0,    0,   10,   10,   30,    0,   31,    0,
   36,    0,    0,    0,    0,   34,   32,   14,   33,    0,
   35,   36,    0,    0,   13,    0,   34,   32,   15,   33,
    0,   35,    0,   30,    0,   31,    0,    0,    0,   17,
   28,    0,   17,    0,   30,   16,   31,   14,   16,   19,
    0,    0,   19,    0,    0,    0,   17,    0,   15,    0,
    0,   17,   16,    5,    0,    0,   19,   16,    0,    0,
   27,   19,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   17,    0,    0,    0,    0,    0,   16,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   17,   18,   19,   20,
   21,   22,   17,   15,    0,    0,    0,    0,   16,    0,
    0,    0,    0,    0,   39,   40,   41,   42,   43,   44,
   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
   55,   56,   57,   58,    0,    0,    0,    0,   13,    0,
    0,    0,    0,    0,    0,    0,   13,   13,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   61,    0,    0,
    0,   14,    0,    0,    0,    0,    0,    0,    0,   14,
   14,    0,   15,    0,    1,    0,    2,    0,    0,    0,
   15,   15,    0,    0,    0,    0,   17,   18,   19,   20,
   21,   22,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   17,   18,   19,   20,   21,   22,    0,
    0,    0,    0,    0,    0,    0,   19,   20,   21,   22,
    0,    0,    0,    0,    0,    0,   17,    0,    0,    0,
    0,    0,   16,    0,   17,   17,   19,    0,    0,    0,
   16,   16,    0,    0,    0,   19,
};
static const YYINT yycheck[] = {                         37,
   38,   40,  257,   37,   42,   43,   44,   45,   42,   47,
   37,   38,   41,   47,   41,   42,   43,   44,   45,   -1,
   47,   -1,   60,   -1,   62,   63,   -1,   -1,   38,   41,
   -1,   41,   44,   60,   44,   62,   63,   37,   38,    3,
    4,    5,   42,   43,   44,   45,   58,   47,   58,   37,
   38,   63,   -1,   63,   42,   43,   94,   45,   58,   47,
   60,   -1,   62,   63,   -1,   38,   -1,   94,   41,   -1,
   -1,   44,   60,   -1,   62,   63,   38,   -1,   -1,   41,
   -1,   43,   44,   45,   94,   58,  124,   60,   -1,   62,
   63,   -1,   41,   -1,   94,   44,   58,  124,   60,   41,
   62,   63,   44,   -1,   -1,   38,   94,   -1,   41,   58,
   43,   44,   45,   -1,  124,   -1,   58,   38,   -1,   -1,
   41,   94,   -1,   44,  124,   58,   -1,   60,   38,   62,
   63,   41,   94,   -1,   44,   -1,  124,   58,   -1,   60,
   -1,   62,   63,   -1,   37,   38,   -1,   -1,   58,   42,
   43,  124,   45,   63,   47,   -1,   -1,   38,   -1,   -1,
   41,   94,  124,   44,   -1,   -1,   37,   60,   -1,   62,
   -1,   42,   43,   94,   45,   37,   47,   58,   -1,   -1,
   42,   43,   63,   45,   94,   47,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   -1,   94,   44,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   94,  124,   -1,   58,   -1,  257,   -1,
  258,   63,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,  124,   -1,  260,  261,  262,  263,  264,  265,  266,
  267,   -1,   -1,  124,   -1,   -1,  258,   -1,  258,   -1,
  260,  261,   94,   -1,  266,  267,  266,  267,   -1,   -1,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  124,   -1,   -1,  258,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,  258,   -1,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,   -1,  258,
   -1,   -1,   -1,   37,   38,   -1,  258,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,  258,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,   60,  258,   62,  260,
  261,  262,  263,  264,  265,  266,  267,   -1,  258,   -1,
  260,  261,   -1,   -1,   -1,   -1,  266,  267,   38,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,  260,  261,  262,
  263,  264,  265,  266,   -1,   -1,   -1,  258,   58,  260,
  261,   38,   -1,   63,   41,  266,  267,   44,   -1,   -1,
   33,   -1,   38,  264,  265,   41,   -1,   40,   44,   -1,
   -1,   58,   45,   37,   38,   -1,   63,   -1,   42,   43,
   -1,   45,   58,   47,   94,   -1,  258,   63,  260,  261,
   -1,   -1,   -1,   -1,  266,  267,   60,   -1,   62,   -1,
   37,   -1,   -1,   -1,   -1,   42,   43,   94,   45,   -1,
   47,   37,   -1,   -1,  124,   -1,   42,   43,   94,   45,
   -1,   47,   -1,   60,   -1,   62,   -1,   -1,   -1,   41,
   94,   -1,   44,   -1,   60,   41,   62,  124,   44,   41,
   -1,   -1,   44,   -1,   -1,   -1,   58,   -1,  124,   -1,
   -1,   63,   58,  126,   -1,   -1,   58,   63,   -1,   -1,
  124,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,  262,  263,
  264,  265,  124,    6,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   -1,   17,   18,   19,   20,   21,   22,
   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
   33,   34,   35,   36,   -1,   -1,   -1,   -1,  258,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   -1,
   -1,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,
  267,   -1,  258,   -1,  257,   -1,  259,   -1,   -1,   -1,
  266,  267,   -1,   -1,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  262,  263,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,  258,   -1,   -1,   -1,
   -1,   -1,  258,   -1,  266,  267,  258,   -1,   -1,   -1,
  266,  267,   -1,   -1,   -1,  267,
};
#define YYFINAL 7
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 268
#define YYUNDFTOKEN 273
#define YYTRANSLATE(a) ((a) > YYMAXTOKEN ? YYUNDFTOKEN : (a))
#if YYDEBUG
static const char *const yyname[] = {

"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'",0,"'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,"'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'|'",0,"'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"number","stop","DEFINED","EQ","NE",
"LE","GE","LS","RS","ANDAND","OROR","UMINUS",0,0,0,0,"illegal-symbol",
};
static const char *const yyrule[] = {
"$accept : S",
"S : e stop",
"e : e '*' e",
"e : e '/' e",
"e : e '%' e",
"e : e '+' e",
"e : e '-' e",
"e : e LS e",
"e : e RS e",
"e : e '<' e",
"e : e '>' e",
"e : e LE e",
"e : e GE e",
"e : e EQ e",
"e : e NE e",
"e : e '&' e",
"e : e '^' e",
"e : e '|' e",
"e : e ANDAND e",
"e : e OROR e",
"e : e '?' e ':' e",
"e : e ',' e",
"e : term",
"term : '-' term",
"term : '!' term",
"term : '~' term",
"term : '(' e ')'",
"term : DEFINED '(' number ')'",
"term : DEFINED number",
"term : number",

};
#endif

int      yydebug;
int      yynerrs;

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#endif
#endif

#define YYINITSTACKSIZE 200

typedef struct {
    unsigned stacksize;
    YYINT    *s_base;
    YYINT    *s_mark;
    YYINT    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
#line 91 "nbcpy.y"
# include "yylex.c"

/*
 * 	(c) Copyright 1986 Gould Inc.
 * 	    All Rights Reserved.
 */
#line 363 "y.tab.c"

#if YYDEBUG
#include <stdio.h>	/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    YYINT *newss;
    YYSTYPE *newvs;

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return YYENOMEM;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (YYINT *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return YYENOMEM;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return YYENOMEM;

    data->l_base = newvs;
    data->l_mark = newvs + i;

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab

int
YYPARSE_DECL()
{
    int yym, yyn, yystate;
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yym = 0;
    yyn = 0;
    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    yystate = 0;
    *yystack.s_mark = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        yychar = YYLEX;
        if (yychar < 0) yychar = YYEOF;
#if YYDEBUG
        if (yydebug)
        {
            if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if (((yyn = yysindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if (((yyn = yyrindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag != 0) goto yyinrecovery;

    YYERROR_CALL("syntax error");

    goto yyerrlab; /* redundant goto avoids 'unused label' warning */
yyerrlab:
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if (((yyn = yysindex[*yystack.s_mark]) != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
            }
        }
    }
    else
    {
        if (yychar == YYEOF) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    if (yym > 0)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);

    switch (yyn)
    {
case 1:
#line 30 "nbcpy.y"
	{return(yystack.l_mark[-1]);}
break;
case 2:
#line 34 "nbcpy.y"
	{yyval = yystack.l_mark[-2] * yystack.l_mark[0];}
break;
case 3:
#line 36 "nbcpy.y"
	{yyval = yystack.l_mark[-2] / yystack.l_mark[0];}
break;
case 4:
#line 38 "nbcpy.y"
	{yyval = yystack.l_mark[-2] % yystack.l_mark[0];}
break;
case 5:
#line 40 "nbcpy.y"
	{yyval = yystack.l_mark[-2] + yystack.l_mark[0];}
break;
case 6:
#line 42 "nbcpy.y"
	{yyval = yystack.l_mark[-2] - yystack.l_mark[0];}
break;
case 7:
#line 44 "nbcpy.y"
	{yyval = yystack.l_mark[-2] << yystack.l_mark[0];}
break;
case 8:
#line 46 "nbcpy.y"
	{yyval = yystack.l_mark[-2] >> yystack.l_mark[0];}
break;
case 9:
#line 48 "nbcpy.y"
	{yyval = yystack.l_mark[-2] < yystack.l_mark[0];}
break;
case 10:
#line 50 "nbcpy.y"
	{yyval = yystack.l_mark[-2] > yystack.l_mark[0];}
break;
case 11:
#line 52 "nbcpy.y"
	{yyval = yystack.l_mark[-2] <= yystack.l_mark[0];}
break;
case 12:
#line 54 "nbcpy.y"
	{yyval = yystack.l_mark[-2] >= yystack.l_mark[0];}
break;
case 13:
#line 56 "nbcpy.y"
	{yyval = yystack.l_mark[-2] == yystack.l_mark[0];}
break;
case 14:
#line 58 "nbcpy.y"
	{yyval = yystack.l_mark[-2] != yystack.l_mark[0];}
break;
case 15:
#line 60 "nbcpy.y"
	{yyval = yystack.l_mark[-2] & yystack.l_mark[0];}
break;
case 16:
#line 62 "nbcpy.y"
	{yyval = yystack.l_mark[-2] ^ yystack.l_mark[0];}
break;
case 17:
#line 64 "nbcpy.y"
	{yyval = yystack.l_mark[-2] | yystack.l_mark[0];}
break;
case 18:
#line 66 "nbcpy.y"
	{yyval = yystack.l_mark[-2] && yystack.l_mark[0];}
break;
case 19:
#line 68 "nbcpy.y"
	{yyval = yystack.l_mark[-2] || yystack.l_mark[0];}
break;
case 20:
#line 70 "nbcpy.y"
	{yyval = yystack.l_mark[-4] ? yystack.l_mark[-2] : yystack.l_mark[0];}
break;
case 21:
#line 72 "nbcpy.y"
	{yyval = yystack.l_mark[0];}
break;
case 22:
#line 74 "nbcpy.y"
	{yyval = yystack.l_mark[0];}
break;
case 23:
#line 77 "nbcpy.y"
	{yyval = -yystack.l_mark[0];}
break;
case 24:
#line 79 "nbcpy.y"
	{yyval = !yystack.l_mark[0];}
break;
case 25:
#line 81 "nbcpy.y"
	{yyval = ~yystack.l_mark[0];}
break;
case 26:
#line 83 "nbcpy.y"
	{yyval = yystack.l_mark[-1];}
break;
case 27:
#line 85 "nbcpy.y"
	{yyval= yystack.l_mark[-1];}
break;
case 28:
#line 87 "nbcpy.y"
	{yyval = yystack.l_mark[0];}
break;
case 29:
#line 89 "nbcpy.y"
	{yyval= yystack.l_mark[0];}
break;
#line 678 "y.tab.c"
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
        {
            yychar = YYLEX;
            if (yychar < 0) yychar = YYEOF;
#if YYDEBUG
            if (yydebug)
            {
                if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == YYEOF) goto yyaccept;
        goto yyloop;
    }
    if (((yyn = yygindex[yym]) != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    *++yystack.s_mark = (YYINT) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;

yyoverflow:
    YYERROR_CALL("yacc stack overflow");

yyabort:
    yyfreestack(&yystack);
    return (1);

yyaccept:
    yyfreestack(&yystack);
    return (0);
}
@
