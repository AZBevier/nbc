head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2021.07.05.18.51.50;	author jbev;	state Exp;
branches;
next	1.1;

1.1
date	95.03.14.03.03.48;	author jbev;	state Exp;
branches;
next	;


desc
@Initital file checkin.
@


1.2
log
@Correct warnings.
@
text
@/*~!mvdir.c*/
/* Name:  mvdir.c Part No.: _______-____r
 *
 * Copyright 1995 - J B Systems, Morrison, CO
 *
 * The recipient of this product specifically agrees not to distribute,
 * disclose, or disseminate in any way, to any one, nor use for its own
 * benefit, or the benefit of others, any information contained  herein
 * without the expressed written consent of J B Systems.
 *
 *                     RESTRICTED RIGHTS LEGEND
 *
 * Use, duplication, or disclosure by the Government is  subject  to
 * restriction  as  set forth in paragraph (b) (3) (B) of the Rights
 * in Technical Data and Computer Software  Clause  in  DAR  7-104.9
 * (a).
 */

#ident	"Make4MPX $Id: mvdir.c,v 1.1 1995/03/14 03:03:48 jbev Exp jbev $"

/*
 * $Log: mvdir.c,v $
 * Revision 1.1  1995/03/14 03:03:48  jbev
 * Initial revision
 *
 */

/*
** mvdir command:  move a directory within its parent directory
**    mvdir dir1 dir2
to build:
    cc mvdir.c -o mvdir
    mv mvdir /bin/mvdir
    cd /bin
    chown root mvdir
    chmod u+s mvdir
*/

#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <signal.h>
#include <ctype.h>
#ifndef mpx
#include <stdlib.h>
#include <unistd.h>
#endif

extern char *getcwd();
static char *cvtdname();
#ifdef NOT_USED
static char *cvtfname();
#endif
static char *pathname();
static void crunch();
#ifdef mpx
extern char curvol[];
extern char curdir[];
extern char *getcwvd();
extern char *str2lc();
static void conv2unix();
static void blcpy();
static void strlcpy();
#endif
char *pname();
void usage();

#define EQ(x,y)    !strcmp(x,y)
#define DOT    "."
#define DOTDOT    ".."
#define DELIM    '/'
#define MAXN    128

char *logdir();
char *pname();
char *dname();

char pf[MAXN];
char pt[MAXN];
char source[MAXN];
char target[MAXN];
char cdbuf[MAXN];
static struct stat s1, s2;

int main(argc, argv)
int argc;
char *argv[];
{
    char *p;
#ifdef mpx
    int more = 0;
#endif

    if (argc != 3)
    	usage();

    /* resolve source directory name */
    if ((p = cvtdname(argv[1])) == (char *)0) {
    	fprintf(stderr, "mvdir: can't resolve source directory %s\n", argv[1]);
    	exit(2);
    }
    strcpy(source, p);
    free(p);
    /* resolve source directory name */
    if ((p = cvtdname(argv[2])) == (char *)0) {
    	fprintf(stderr, "mvdir: can't resolve target directory %s\n", argv[1]);
    	exit(2);
    }
    strcpy(target, p);
    free(p);
#ifdef mpx
    if (source[strlen(source)-1] != '/')
    	strcat(source, "/");
    if (target[strlen(target)-1] != '/')
    	strcat(target, "/");
#endif
    stat(source, &s1);
    if ((s1.st_mode & S_IFMT) != S_IFDIR)
    	usage();
    if (EQ(source, target)) {
    	fprintf(stderr, "mvdir: ?? source == target\n");
    	exit(2);
    }
#ifdef mpx
    setsiz(s2.st_size, 0, 0);
    if (stat(target, &s2) < 0) {
    	if (creatd(target, 0666) < 0) {
    	    fprintf(stderr, "mvdir: cannot create %s\n", target);
    	    exit(2);
    	}
    }
#else
    if (stat(target, &s2) >= 0) {
    	fprintf(stderr, "mvdir: %s exists\n", target);
    	exit(2);
    }
    p = dname(source);
    if (EQ(p, DOT) || EQ(p, DOTDOT) || !*p || p[strlen(p)-1] == '/') {
    	fprintf(stderr, "mvdir: cannot rename %s\n", p);
    	exit(2);
    }
#endif
    p = pname(source);
    if (stat(p, &s1) < 0 || stat(pname(target), &s2) < 0) {
    	fprintf(stderr, "mvdir: cannot locate parent\n");
    	exit(2);
    }
#ifndef mpx
    if (s1.st_dev != s2.st_dev || s1.st_ino != s2.st_ino) {
    	fprintf(stderr, "mvdir: directory rename only\n");
    	exit(2);
    }
#endif
    if (access(p, 2) < 0) {
    	fprintf(stderr, "mvdir: no write access to %s\n", p);
    	exit(2);
    }

#ifndef mpx
    /*
     * ignore signals that could cause the directories to be left
     * linked together.
     */
    signal(SIGHUP, SIG_IGN);
    signal(SIGINT, SIG_IGN);
    signal(SIGQUIT, SIG_IGN);
    signal(SIGTERM, SIG_IGN);
#endif
#ifdef mpx
    while ((p=logdir(source, more++))) {
    	/* copy all of the files */
    	strcpy(pf,source);
    	strcat(pf, p);
    	strcpy(pt,target);
    	strcat(pt, p);
    	/* copy the file */
    	if (link(pf, pt) < 0)
    	    fprintf(stderr, "mvdir: cannot link %s and %s\n", pf, pt);
    }
#else
    if (link(source, target) < 0) {
    	fprintf(stderr, "mvdir: cannot link %s and %s\n", source, target);
    	exit(2);
    }
#endif
    if (unlink(source) < 0) {
    	fprintf(stderr, "mvdir: ?? cannot unlink %s\n", source);
    	exit(2);
    }
    exit(0);
}


/* return a pointer to the first name in a pathname.
 * This is the parent's directory name.
 */
char * pname(name)
register char *name;
{
    register int c;
    register char *p, *q;
    static char buf[MAXN];

    p = q = buf;
    while ((c = *p++ = *name++))
    	if (c == DELIM)
    	    q = p - 1;
    if (q == buf && *q == DELIM)
    	q++;
    *q = 0;
    return buf[0] ? buf : DOT;
}


/* return a pointer to the last name in a pathname
 * that does not end with a '/'.
 */
char *
dname(name)
register char *name;
{
    register char *p;

    p = name;
    while (*p)
    	if (*p++ == DELIM && *p)
    	    name = p;
    return name;
}


void usage()
{
    fprintf(stderr, "Usage: mvdir dir1 dir2\n");
    exit(2);
}

/* cvtdname
 * convert an arbitrary directory name to a qualified unix pathname.
 * return pointer to malloc'd name or null if error.
 */
static char *
cvtdname(path)
char *path;
{
    char *dirp, *dbuf, *retp;

    dbuf = (char *)malloc(MAXN);
#ifdef mpx
    /* make sure pathname is l/c */
    str2lc(path);
#endif
    /* get default working directory */
    dirp = getcwd(0, MAXN);
    /* see if just a name, if so add () around name */
#ifdef mpx
    if (*path != '/' && *path != '@@' && *path != '^' && *path != '('
      && *path != '.') {
    	/* put () around dir name to see if o.k. */
    	dbuf[0] = '(';		/* start with ( */
    	strcpy(&dbuf[1], path);	/* copy name */
    	strcat(dbuf, ")");	/* put on ) */
    	retp = pathname(dirp, dbuf);
    } else {
    	retp = pathname(dirp, path);
    }
#else
    retp = pathname(dirp, path);
#endif
    if (dbuf)
    	free(dbuf);
    if (dirp)
    	free(dirp);
    return(retp);
}

#ifdef NOT_USED
/* cvtfname
 * convert an arbitrary filename to a qualified unix pathname.
 * return pointer to malloc'd name or null if error.
 */
static char *
cvtfname(path)
char *path;
{
    char *dirp, *retp;

#ifdef mpx
    /* make sure pathname is l/c */
    str2lc(path);
#endif
    /* get default working directory */
    dirp = getcwd(0, MAXN);
    retp = pathname(dirp, path);
    if (dirp)
    	free(dirp);
    return(retp);
}
#endif

/* Convert relative to absolute pathnames */

/* Given a working directory and an arbitrary pathname, resolve them into
 * an absolute pathname. Memory is allocated for the result, which
 * the caller must free
 */
static char *
pathname(cd,path)
char *cd;	/* Current working directory */
char *path;	/* Pathname argument */
{
    register char *buf;

    if(cd == (char *)0 || path == (char *)0)
    	return (char *)0;

    /* Strip any leading white space on args */
    while(*cd == ' ' || *cd == '\t')
    	cd++;
    while(*path == ' ' || *path == '\t')
    	path++;

    /* Allocate and initialize output buffer; user must free
     * add fudge factor to malloc size in case user specified
     * just a / and we must replace it with /system/system
     */
    buf = (char *)malloc((unsigned)strlen(cd) + strlen(path) + 16);
    buf[0] = '\0';

    /* Interpret path relative to cd only if it doesn't begin with "/" */
    /* for MPX also see if @@, ^, or ( */
    if(*path == '/'
#ifdef mpx
      || *path == '@@' || *path == '^' || *path == '('
#endif
      ) {
    	crunch(buf,path);
    } else {
    	crunch(buf,cd);
    	crunch(buf,path);
    }

    /* Special case: null final path means the root directory */
    if(buf[0] == '\0'){
    	buf[0] = '/';
    	buf[1] = '\0';
    }
#ifdef mpx
    /* now convert to a qualified unix name if it was entered
     * as an MPX name
     */
    conv2unix(buf);
#endif

    return buf;
}

/* Process a path name string, starting with and adding to
 * the existing buffer
 */
static void
crunch(buf,path)
char *buf;
register char *path;
{
    register char *cp;
	
    cp = buf + strlen(buf);	/* Start write at end of current buffer */
	
    /* Now start crunching the pathname argument */
    for(;;){
    	/* Strip leading /'s; one will be written later */
    	while(*path == '/')
    	    path++;
    	if(*path == '\0')
    	    break;		/* no more, all done */
    	/* Look for parent directory references, either at the end
    	 * of the path or imbedded in it
    	 */
    	if(strcmp(path,"..") == 0 || strncmp(path,"../",3) == 0) {
    	    /* Hop up a level */
    	    if((cp = strrchr(buf,'/')) == (char *)0)
    		    cp = buf;	/* Don't back up beyond root */
    		*cp = '\0';		/* In case there's another .. */
    		path += 2;		/* Skip ".." */
    		while(*path == '/')	/* Skip one or more slashes */
    		    path++;
    		/* Look for current directory references, either at the end
    		 * of the path or imbedded in it
    		 */
    	} else if(strcmp(path,".") == 0 || strncmp(path,"./",2) == 0) {
    	    /* "no op" */
    	    path++;			/* Skip "." */
    	    while(*path == '/')		/* Skip one or more slashes */
    		path++;
    	} else {
    	    /* Ordinary name, copy up to next '/' or end of path */
#ifdef mpx
    if(cp == buf && (*path == '@@' || *path == '^' || *path == '(')) {
    } else
#endif
    	    *cp++ = '/';
    	    while(*path != '/' && *path != '\0')
    		*cp++ = *path++;
    	}
    }
    *cp++ = '\0';
}

#ifdef mpx
/* convert unix or mpx filename to unix filename */
/* .'s and multiple /'s will have been removed by crunch above */
/* first char must be /, ., @@, ^, or ( to be converted */
/* NOTE: string supplied must be big enough for conversion */

static void
conv2unix(s)
register char *s;
{
    register char *os = s;
    char *tp;

    if (s == 0 || *s == 0)return;
    	switch (*os) {
    	    case '/':		/* path starts with /, leave it */
    		/* check for just a '/', if yes, give /system/system */
    		if (*++os == '\0') {	/* see if just a '/' */
    		    strcat(os, "system/system"); /* copy in root */
    		    return;		/* we are done */
    		}
    		return;		/* done with conversion */

    	    case '^':		/* path starts with ^ put in /curvol */
    		getcwvd();	/* get current working vol, dir */
    		/* move over other "stuff" to make room for vol */
    		bcopy(&os[1], os+strlen(curvol)+1, strlen(os));
    		blcpy(curvol, os+1, strlen(curvol));
    		/* go to process dir name, if any */
    		goto dodir;

    	    case '(':		/* path starts with ( put in /curvol */
    		getcwvd();	/* get current working vol, dir */
    		/* move over other "stuff" to make room for vol */
    		bcopy(os, os+strlen(curvol)+1, strlen(os)+1);
    		blcpy(curvol, os+1, strlen(curvol));
    		/* drop thru to process dir name, if any */

    	    case '@@':		/* path starts with @@ put in / */
dodir:
    		*os++ = '/';
    		/* check for just an '@@', if yes, give /system */
    		if (*os == '\0') {	/* see if just a '@@' */
    		    strcat(os, "system/system"); /* copy in root */
    		    return;		/* we are done */
    		}
    		/* check to see if @@vol^dir or @@vol^(dir) */
    		if (tp = strchr(os, '^')) {       /* got end of vol */
    		    /* check to see if next char is '('.  If yes,
    		     * just delete the ^ and continue
    		     */
    		    if (tp[1] == '(') {		/* see if '(' */
    			bcopy(&tp[1], tp, strlen(tp));
    		    } else {
    			*tp++ = '/';	/* terminate volume name */
    		    }
    		    os = tp;		/* next char in input */
    		}
    		if (tp = strchr(os, '(')) {	/* got end of vol */
    		    *tp++ = '/';	/* terminate volume name */
    		    os = tp;		/* next char in input */
    		    if (tp = strchr(os, ')')) {  /* get end of dir */
    			if (tp[1] == '\0')  /* see if a file name */
    			    *tp = '\0';	/* no, leave off last / */
    			else
    			    *tp++ = '/';    /* terminate directory */
    			os = tp;        /* start of file name or null */
    		    } else {		/* have /vol/, will get error */
    			return;
    		    }
    		} else {		/* have /vol, just wants volume */
    		    return;
    		}
    		return;			/* done with conversion */

    	    case '.' :            /* curr directory? */
    		if (os[1] == '.') { /* have .. now what? */
    		    if (os[2] == '/') { /* have ../ put in cur vol */
    			getcwvd();	/* get current working vol, dir */
    			bcopy(&os[3], os+strlen(curvol)+2, strlen(os) - 1);
    			*os++ = '/';
    			blcpy(curvol, os, strlen(curvol));
    			os += (strlen(curvol)+1);
    			*os++ = '/';
    			return;
    		    }
    		    if (os[2] == 0) { /* have just .. give vol */
    			getcwvd();	/* get current working vol, dir */
    			*os++ = '/';
    			strlcpy (os, curvol);
    			os += strlen(curvol);
    			*os++ = '\0';        /* end of volume */
    			return;          /* return /vol */
    		    }
    		    return;            /* have ..? just an error */
    		}
    		if (os[1] == '/') {  /* have ./, just curr dir */
    		    /* copy down file name */
    		    bcopy(&os[2], os, strlen(os));
    		    return;
    		}
    		if (os[1] == 0) {    /* have just ., return curr dir */
    		    *os++ = '/';
    		    getcwvd();	/* get current working vol, dir */
    		    strlcpy(os, curvol); /* copy in volume */
    		    os += strlen(curvol);
    		    *os++ = '/';        /* start of dir */
    		    strlcpy(os, curdir); /* copy in dir */
    		    os += strlen(curdir);
    		    *os++ = '\0';        /* terminate dir */
    		    return;
    		}
    		return;              /* have .? just an error */
    	    default:
    		return;              /* everything else o.k. */
    	}
}

/*
 * copy string p2 to string p1, converting to l/c as we go.
 */
static void
strlcpy(p1, p2)
char * p1;
char * p2;
{
    int c;
    /* copy p2 to p1 */
    while (c = *p2++) {
    	if (isupper(c))
    	    c = tolower(c);
    	*p1++ = c;
    }
    *p1 = '\0';
}

/*
 * copy string b1 to l/c string b2, with overlap testing
 */
static void
blcpy (b1, b2, length)
     register char *b1;
     register char *b2;
     register int length;
{
    register int c;
    /* handle buffer overlap case */
    if (b1 < b2)	/* possible overlap */
    	for (b1 += length, b2 += length; length--; ) {
    	    c = *--b1;
    	    if (isupper(c))
    		c = tolower(c);
    	    *--b2 = c;
    	}
    else
    	for (;length--;) {
    	    c = *b1++;
    	    if (isupper(c))
    		c = tolower(c);
    	    *b2++ = c;
    	}
}

#endif /* mpx */
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
#ident	"Make4MPX $Id$"
d21 5
a25 1
/* $Log: $
d45 4
d52 1
d54 1
d66 2
d86 2
a87 1
main(argc, argv)
d90 2
a91 1
    char *p, *cp, *dirp;
d93 1
d198 1
a198 2
char *
pname(name)
d201 1
a201 1
    register c;
d206 1
a206 1
    while (c = *p++ = *name++)
d233 1
a233 1
usage()
d278 1
d300 1
d384 1
a384 1
    		cp = buf;		/* Don't back up beyond root */
@
