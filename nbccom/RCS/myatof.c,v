head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2019.01.31.21.58.56;	author jbev;	state Exp;
branches;
next	1.4;

1.4
date	95.02.07.22.48.30;	author jbev;	state Exp;
branches;
next	1.3;

1.3
date	95.02.02.05.08.30;	author jbev;	state Exp;
branches;
next	1.2;

1.2
date	95.01.30.19.18.48;	author jbev;	state Exp;
branches;
next	1.1;

1.1
date	95.01.27.23.41.27;	author jbev;	state Exp;
branches;
next	;


desc
@Initial RCS File
@


1.5
log
@Update for Linux
@
text
@/*~!myatof.c*/
/* Name:  myatof.c Part No.: _______-____r
 *
 * Copyright 1995 - J B Systems, Morrison, CO
 *
 * The recipient of this product specifically agrees not to distribute,
 * disclose, or disseminate in any way, to any one, nor use for its own
 * benefit, or the benefit of others, any information contained  herein
 * without the expressed written consent of J B Systems.
 *
 *                     RESTRICTED RIGHTS LEGEND
 *
 * Use, duplication, or disclosure by the Government is  subject  to
 * restriction  as  set forth in paragraph (b) (3) (B) of the Rights
 * in Technical Data and Computer Software  Clause  in  DAR  7-104.9
 * (a).
 */

#ident	"@@(#)nblib:myatof.c	1.0"

#ifdef MYATOF

#include <ctype.h>
#include "float.h"
#include <string.h>

/*  Note : this atof() generates an internal floating point representation
 *	   of a number.  If we are in IEEE mode, the number is translated
 *	   to IEEE format.  Otherwise it is translated to Encore format.
 */

FPN ifpn;	/* internal floating point number */

/* #define FLOATDEB */

#ifdef FLOATDEB
extern int sdump();
#endif
unsigned char ss[100];
extern void zerof();
extern void negf();
extern int dodig();

FPN *
myatof(s)
register  unsigned char  *s;
{
	register int i;
	int	tz;
	int	exp;
	int	sign;
	int	esign;

#ifdef FLOATDEB
	printf("myatof entry: %s\n", s);
	strcpy(ss,s);
	s = ss;
#else
	*ss='\0';
	strcpy(ss,s);
	s = ss;
#endif
	zerof( &ifpn );		/* clear destination number */
	esign = sign = exp = tz = 0;	/* and local variables */

	i = *s++;		/* get 1st char */

#ifdef FLOATDEB
	printf("tz = %x, exp = %x, next c = %x\n", tz, exp, i);
	printf("myatof start: exp %d man ", ifpn.ne);
	sdump(&ifpn.nf, NF);
#endif
	/* skip any leading white spaces */
	while( i == ' ' || i == '\t') i = *s++;
	/* see if a sign given */
	if( i == '-' ) {
		sign++;
		i = *s++;
	} else if( i == '+' )
		i = *s++;
	/* skip any more white spaces */
	while( i == ' ' || i == '\t') i = *s++;
	/* skip any leading zero's */
	while( i == '0') i = *s++;
	/* now process any number digits */
	while( i >= '0' && i <= '9' ){
		tz = dodig( &ifpn, i-'0', tz );
		i = *s++;
#ifdef FLOATDEB
	printf("tz = %x, exp = %x, next c = %x\n", tz, exp, i);
	printf("myatof 1: exp %d man ", ifpn.ne);
	sdump(&ifpn.nf, NF);
#endif
	}
	/* now process a fraction, if present */
	if( i == '.' ){
		/* do the fraction */
		i = *s++;
		while( i >= '0' && i <= '9' ){
			tz = dodig( &ifpn, i-'0', tz );
			exp--;
			i = *s++;
		}
	}
#ifdef FLOATDEB
	printf("tz = %x, exp = %x, next c = %x\n", tz, exp, i);
	printf("myatof 2: exp %d man ", ifpn.ne);
	sdump(&ifpn.nf, NF);
#endif
	/* now see if exponent */
	exp = (tz + exp);
	tz = 0;			/* zero trailing zeros count */
	/* skip any more white spaces */
	while( i == ' ' || i == '\t') i = *s++;
#ifdef FLOATDEB
	printf("tz = %x, exp = %x, next c = %x\n", tz, exp, i);
	printf("myatof 3: exp %d man ", ifpn.ne);
	sdump(&ifpn.nf, NF);
#endif
	/* now process an exponent, if present */
	if( i == 'e' || i == 'E' ){
		/* do the exponent */
		i = *s++;
		/* see if a sign given */
		if( i == '-' ) {
			esign++;
			i = *s++;
		} else if( i == '+' )
			i = *s++;
		/* skip any leading zero's */
		while( i == '0') i = *s++;
		while( i >= '0' && i <= '9' ){
			tz = tz * 10 + i-'0';
			i = *s++;
		}
	}
#ifdef FLOATDEB
	printf("tz = %x, exp = %x, next c = %x\n", tz, exp, i);
	printf("myatof 4: exp %d man ", ifpn.ne);
	sdump(&ifpn.nf, NF);
#endif
	/* we are done with number */
	if (esign) tz = -tz;
	/* set the exponent */
	ifpn.ne += (tz + exp);
#ifdef FLOATDEB
	printf("tz = %x, exp = %x, next c = %x\n", tz, exp, i);
	printf("myatof 5: exp %d man ", ifpn.ne);
	sdump(&ifpn.nf, NF);
#endif
	/* if negative, negate the value */
	if( sign ) negf( &ifpn );
#ifdef FLOATDEB
	printf("tz = %x, exp = %x, next c = %x\n", tz, exp, i);
	printf("ret myatof: exp %d man ", ifpn.ne);
	sdump(&ifpn.nf, NF);
#endif
	return (&ifpn);
}

#endif /* MYATOF */
@


1.4
log
@Fix ploating point code again.  Correct csect/dsect and label code.
@
text
@d25 1
d38 1
d40 3
a42 3
#else
unsigned char ss[100];
#endif
@


1.3
log
@Add internal format for floating point values.
@
text
@d37 3
d54 6
d66 5
d81 2
d87 5
d103 5
d113 5
d128 2
d135 5
d145 2
a146 1
	printf("myatof: exp %d man ", ifpn.ne);
d152 1
@


1.2
log
@Add new fp arithmetic
@
text
@d33 7
a39 1
double
d47 1
d49 3
d53 1
a53 1
	sign = exp = tz = 0;	/* and local variables */
d62 1
a62 1
		i = s++;
d64 1
a64 1
		i = s++;
d70 1
a70 1
		i = s++;
d75 1
a75 1
		i = s++;
d79 21
a99 1
			i = s++;
d103 1
d106 4
d112 5
a116 2

	return(flag.bit.sgn ? -d.d : d.d);
@


1.1
log
@Initial revision
@
text
@d21 2
d81 1
@
